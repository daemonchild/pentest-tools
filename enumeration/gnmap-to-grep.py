#!/usr/bin/env python3

#      _                                       _     _ _     _
#   __| | __ _  ___ _ __ ___   ___  _ __   ___| |__ (_) | __| |
#  / _` |/ _` |/ _ \ '_ ` _ \ / _ \| '_ \ / __| '_ \| | |/ _` |
# | (_| | (_| |  __/ | | | | | (_) | | | | (__| | | | | | (_| |
#  \__,_|\__,_|\___|_| |_| |_|\___/|_| |_|\___|_| |_|_|_|\__,_|
#

# Title:	Python GNMAP File Parser
# Version:	1.0
# Purpose:	Makes a greppable nmap output file even more useful

# Usage:	
# cat [filename.gnmap] | ./gnmap.py
# ./gnmap.py [filename.gnmap]

import sys
import re

if len(sys.argv) == 1:

	# Read from stdin
	data = sys.stdin

else:

	# Read from file
	file = open(sys.argv[1], 'r')
	data = file.readlines()

for line in data:

	# Is it an interesting line?
	if (re.search("^Host: .*Ports:", line)) is not None:
	
		# Tokenise
		tokens = line.split('\t')
		
		host = tokens[0].split(' ')[1]
		ports = tokens[1].split(',')
			
		# Run through port data array
		for portdata in ports:
		
			# The first one includes the 'Ports:' string, drop it
			if re.search("^Ports:", portdata):
				portdata = portdata.split(' ')[1]

			tokens = portdata.split('/')

			# Remove null tokens
			tokens = [i for i in tokens if i != '']

			# Extract from tokens
			port = tokens[0]
			if " " in port:
				port = port[1:]

			proto = tokens[2]
			state = tokens[1]
			service = tokens[3]

			print(f"{host},{port},{state},{proto},{service}")
