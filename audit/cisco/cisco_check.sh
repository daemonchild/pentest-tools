#!/bin/bash

# Quick Scan of Cisco Kit for Common Issues
# With Ease of reporting in mind

if test -z "$1"; then

	# No parameters, fail
	echo "Usage: cisco_check.sh [list of files to check, preferable *.txt]"
	exit 1

else 

	# Set variables
	FILES="*.txt"
	echo
	echo "WARNING: Ignoring whatever you provided as a parameter and doing $FILES instead."
	echo
	
	# Ok, let's check for common password hashes
	
	echo --- Default Password Hashes
	for HASH in 2KFQnbNIdI.2KYOU 8Ry2YjIyt7RRXU24 ; do
	
		echo "Hash: $HASH"
		grep -a $HASH $FILES | cut -f 1 -d "."
		echo
	done
	
	
	# Password Reuse
	echo "--- Password Reuse (if single entry displayed, ignore)"
	# Create a list of the password hashes which exist in the device
	
	echo "- Simple enable password statements"
	PASSWDS=`grep -a "passwd [0-9a-zA-Z]* encrypted" $FILES | cut -f 2 -d " " | sort | uniq`
	
	for PASS in $PASSWDS ; do
	
		echo "password $PASS encrypted:"
		grep -a $PASS $FILES | cut -f 1 -d "." | sort | uniq
		echo
	done
	
	
	echo "- Username Based (ASA Type)"

	PASSWDS0=`grep -a "username [0-9a-zA-Z\-]* password [0-9A-Za-z\-\\\/]* encrypted" *.txt | cut -f 2 -d : | cut -f 4 -d " " | sort | uniq | sed '/^$/d'`	

	for PASS in $PASSWDS0 ; do
	
		echo "username [username] password $PASS"
		grep -a $PASS $FILES | cut -f 1 -d "." | sort | uniq
		echo
	done
	
	# THERE IS something very odd going on and the password hashes include weird characters.
	# This means that sort uniq isn't working.
	
	echo "-  Type 7 passwords reused (eg: TACACS+) - This may not be useful?"
	PASSWDS7=`grep -a 'password 7\|key 7' $FILES | sed 's/password\ 7\ /~/g' | sed 's/key\ 7\ /~/g' | cut -f 2 -d "~" | cut -f 1 -d " "  | tr -dc '[:alnum:][:space:]' | sort | uniq | sed '/^$/d'`
	for PASS in $PASSWDS7 ; do
	
		CLEANED=`echo "[$PASS]" | tr -dc '[:alnum:]'`
		echo "password/key 7 $CLEANED"
		grep -a $CLEANED $FILES | cut -f 1 -d "." | sort | uniq
		echo
	done

	echo "--- Cisco Type 7 (easily Decrypted)"
	
	echo "- Devices with Type 7 passwords"
	TYPE7DEVS=`grep -a 'password 7\|key 7' $FILES | cut -f 1 -d "." | sort | uniq`
	
	for DEV in $TYPE7DEVS ; do
	
		echo $DEV

	done
	echo
	
	echo "- Password Hashes Table"
	echo "Hash, Password"
	for PASS in $PASSWDS7 ; do 
		
		# removes control chars, before decrypt
		CLEANED=`echo "[$PASS]" | tr -dc '[:alnum:]'`
		THEPASS=`ciscotype7.pl $PASS`
			
		echo "$CLEANED, $THEPASS"
		
		
	done
			


	echo
	echo "--- ASA Version"

	grep "ASA Version" * | sed 's/.txt:/ /g' | awk '{print $1" v"$4};'



	echo 
	echo "--- iOS Version"
	echo
	echo "Device, Version"
	
	grep version\ [0-9][0-9].[0-9]* * | sed 's/.txt:/\ /g' | cut -f 1,3 -d " " | sed 's/\ /,\ /g'
	echo
	
	echo --- IOS Version, Affected Components ---

	for ver in `grep "Cisco IOS Software" * | cut -f 3 -d "," | cut -f 3 -d " " | sort | uniq`; do 
		echo $ver ; grep $ver *.txt | cut -f 1 -d "." | sort | uniq
		echo  
	done
	
	
fi

echo


	echo "--- DHCPD Enabled"
	grep -a "dhcpd enable" $FILES | cut -f 1 -d "." | sort | uniq
	echo
	
	echo "--- Telnet"
	
	grep ^"telnet" $FILES | grep -v "timeout" | cut -f 1 -d ":" | sort | uniq
	echo

    echo "--- SSH Timeout (IOS)"
    
    echo
    echo "Device, SSH Timeout"
    grep -a "ip ssh time-out" $FILES | sed 's/.txt/\ /g' | cut -f 1,5 -d " " | sed 's/\ /,\ /g'
    
    echo "--- SSH Timeout (ASA)"
    echo
    echo "Device, SSH Timeout"
    grep -a "ssh timeout" $FILES | sed 's/.txt/\ /g' | cut -f 1,4 -d " " | sed 's/\ /,\ /g'
    
    echo
    
    echo "--- SSH Version 1"
    
    for F in $FILES ; do
    	if !(grep -q "ssh version 2" $F) ; then
    	
    		echo $F | cut -f 1 -d "."
    	
		fi
    
    done  
    echo
    
    echo "--- HTTP Access Enabled"
    
    for F in $FILES ; do
    	if !(grep -q "no ip http server" $F) ; then
    	
    		echo $F | cut -f 1 -d "."
    	
		fi
    
    done  
    echo
    
    echo "--- CDP Enabled"
    
    for F in $FILES ; do
    	if !(grep -q "no cdp run" $F) ; then
    	
    		if !(grep -q "no cdp enable" $F) ; then
    	
    			echo $F | cut -f 1 -d "."
    		fi
    	
		fi
    
    done     
    echo
    
    # Fun with SNMP
    
    # Community string extraction
    
    echo --- SNMP Strings
    echo
    echo "Device, String, Type (RO/RW)"
    grep "snmp-server community *" *.txt | sed 's/.txt:/\ /g' | cut -f 1,4,5 -d " " | sed 's/\ /,\ /g'
    echo
    
    echo "--- No TFTP Server ACL"
    
    for F in $FILES ; do
    	if !(grep -q "snmp-server file-transfer access-group" $F) ; then
    	
    		# IOS only
    		if !(grep -q "ASA Version" $F) ; then
       	
    			echo $F | cut -f 1 -d "."

			fi
    	fi
    done     
    echo
    
    
    
    
    
